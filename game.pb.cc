// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#define _SCL_SECURE_NO_WARNINGS
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game {

namespace {

const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Board_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Board_reflection_ = NULL;
const ::google::protobuf::Descriptor* Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_2eproto() {
  protobuf_AddDesc_game_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game.proto");
  GOOGLE_CHECK(file != NULL);
  User_descriptor_ = file->message_type(0);
  static const int User_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, human_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, symbol_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  Board_descriptor_ = file->message_type(1);
  static const int Board_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, y_),
  };
  Board_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Board_descriptor_,
      Board::default_instance_,
      Board_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Board));
  Move_descriptor_ = file->message_type(2);
  static const int Move_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Move, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Move, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Move, symbol_),
  };
  Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Move_descriptor_,
      Move::default_instance_,
      Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Move));
  Game_descriptor_ = file->message_type(3);
  static const int Game_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, board_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, turnfor_),
  };
  Game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game_descriptor_,
      Game::default_instance_,
      Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Board_descriptor_, &Board::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Move_descriptor_, &Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game_descriptor_, &Game::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_2eproto() {
  delete User::default_instance_;
  delete User_reflection_;
  delete Board::default_instance_;
  delete Board_reflection_;
  delete Move::default_instance_;
  delete Move_reflection_;
  delete Game::default_instance_;
  delete Game_reflection_;
}

void protobuf_AddDesc_game_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngame.proto\022\004game\"E\n\004User\022\014\n\004name\030\001 \002(\t"
    "\022\r\n\005human\030\002 \002(\010\022\020\n\005score\030\003 \001(\005:\0010\022\016\n\006sym"
    "bol\030\004 \002(\t\"\035\n\005Board\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005"
    "\",\n\004Move\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\016\n\006symbol"
    "\030\003 \002(\t\"w\n\004Game\022\030\n\004user\030\001 \003(\0132\n.game.User"
    "\022\032\n\005board\030\002 \001(\0132\013.game.Board\022\017\n\007options\030"
    "\003 \002(\005\022\027\n\003mem\030\004 \003(\0132\n.game.Move\022\017\n\007turnFo"
    "r\030\005 \002(\tB\"\n\024com.example.tutorialB\nGamePro"
    "tos", 323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  User::default_instance_ = new User();
  Board::default_instance_ = new Board();
  Move::default_instance_ = new Move();
  Game::default_instance_ = new Game();
  User::default_instance_->InitAsDefaultInstance();
  Board::default_instance_->InitAsDefaultInstance();
  Move::default_instance_->InitAsDefaultInstance();
  Game::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_2eproto {
  StaticDescriptorInitializer_game_2eproto() {
    protobuf_AddDesc_game_2eproto();
  }
} static_descriptor_initializer_game_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int User::kNameFieldNumber;
const int User::kHumanFieldNumber;
const int User::kScoreFieldNumber;
const int User::kSymbolFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.User)
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game.User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  human_ = false;
  score_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:game.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(human_, score_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_human;
        break;
      }

      // required bool human = 2;
      case 2: {
        if (tag == 16) {
         parse_human:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &human_)));
          set_has_human();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_symbol;
        break;
      }

      // required string symbol = 4;
      case 4: {
        if (tag == 34) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.User)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required bool human = 2;
  if (has_human()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->human(), output);
  }

  // optional int32 score = 3 [default = 0];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.User)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required bool human = 2;
  if (has_human()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->human(), target);
  }

  // optional int32 score = 3 [default = 0];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // required string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool human = 2;
    if (has_human()) {
      total_size += 1 + 1;
    }

    // optional int32 score = 3 [default = 0];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required string symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_human()) {
      set_human(from.human());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(human_, other->human_);
    std::swap(score_, other->score_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Board::kXFieldNumber;
const int Board::kYFieldNumber;
#endif  // !_MSC_VER

Board::Board()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.Board)
}

void Board::InitAsDefaultInstance() {
}

Board::Board(const Board& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game.Board)
}

void Board::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Board::~Board() {
  // @@protoc_insertion_point(destructor:game.Board)
  SharedDtor();
}

void Board::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Board::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Board::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Board_descriptor_;
}

const Board& Board::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Board* Board::default_instance_ = NULL;

Board* Board::New() const {
  return new Board;
}

void Board::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Board*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Board::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.Board)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.Board)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.Board)
  return false;
#undef DO_
}

void Board::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.Board)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.Board)
}

::google::protobuf::uint8* Board::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Board)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.Board)
  return target;
}

int Board::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Board::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Board* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Board*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Board::MergeFrom(const Board& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Board::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Board::CopyFrom(const Board& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Board::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Board::Swap(Board* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Board::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Board_descriptor_;
  metadata.reflection = Board_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Move::kXFieldNumber;
const int Move::kYFieldNumber;
const int Move::kSymbolFieldNumber;
#endif  // !_MSC_VER

Move::Move()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.Move)
}

void Move::InitAsDefaultInstance() {
}

Move::Move(const Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game.Move)
}

void Move::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Move::~Move() {
  // @@protoc_insertion_point(destructor:game.Move)
  SharedDtor();
}

void Move::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Move_descriptor_;
}

const Move& Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Move* Move::default_instance_ = NULL;

Move* Move::New() const {
  return new Move;
}

void Move::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Move*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(x_, y_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_symbol;
        break;
      }

      // required string symbol = 3;
      case 3: {
        if (tag == 26) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.Move)
  return false;
#undef DO_
}

void Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.Move)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required string symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.Move)
}

::google::protobuf::uint8* Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Move)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required string symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.Move)
  return target;
}

int Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required string symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Move::MergeFrom(const Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Move::CopyFrom(const Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Move::Swap(Move* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Move_descriptor_;
  metadata.reflection = Move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game::kUserFieldNumber;
const int Game::kBoardFieldNumber;
const int Game::kOptionsFieldNumber;
const int Game::kMemFieldNumber;
const int Game::kTurnForFieldNumber;
#endif  // !_MSC_VER

Game::Game()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.Game)
}

void Game::InitAsDefaultInstance() {
  board_ = const_cast< ::game::Board*>(&::game::Board::default_instance());
}

Game::Game(const Game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game.Game)
}

void Game::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  board_ = NULL;
  options_ = 0;
  turnfor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game::~Game() {
  // @@protoc_insertion_point(destructor:game.Game)
  SharedDtor();
}

void Game::SharedDtor() {
  if (turnfor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete turnfor_;
  }
  if (this != default_instance_) {
    delete board_;
  }
}

void Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game_descriptor_;
}

const Game& Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Game* Game::default_instance_ = NULL;

Game* Game::New() const {
  return new Game;
}

void Game::Clear() {
  if (_has_bits_[0 / 32] & 22) {
    if (has_board()) {
      if (board_ != NULL) board_->::game::Board::Clear();
    }
    options_ = 0;
    if (has_turnfor()) {
      if (turnfor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        turnfor_->clear();
      }
    }
  }
  user_.Clear();
  mem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.User user = 1;
      case 1: {
        if (tag == 10) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectTag(18)) goto parse_board;
        break;
      }

      // optional .game.Board board = 2;
      case 2: {
        if (tag == 18) {
         parse_board:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_board()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_options;
        break;
      }

      // required int32 options = 3;
      case 3: {
        if (tag == 24) {
         parse_options:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &options_)));
          set_has_options();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mem;
        break;
      }

      // repeated .game.Move mem = 4;
      case 4: {
        if (tag == 34) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mem;
        if (input->ExpectTag(42)) goto parse_turnFor;
        break;
      }

      // required string turnFor = 5;
      case 5: {
        if (tag == 42) {
         parse_turnFor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_turnfor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->turnfor().data(), this->turnfor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "turnfor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.Game)
  return false;
#undef DO_
}

void Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.Game)
  // repeated .game.User user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(i), output);
  }

  // optional .game.Board board = 2;
  if (has_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->board(), output);
  }

  // required int32 options = 3;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->options(), output);
  }

  // repeated .game.Move mem = 4;
  for (int i = 0; i < this->mem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mem(i), output);
  }

  // required string turnFor = 5;
  if (has_turnfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->turnfor().data(), this->turnfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "turnfor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->turnfor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game.Game)
}

::google::protobuf::uint8* Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Game)
  // repeated .game.User user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(i), target);
  }

  // optional .game.Board board = 2;
  if (has_board()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->board(), target);
  }

  // required int32 options = 3;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->options(), target);
  }

  // repeated .game.Move mem = 4;
  for (int i = 0; i < this->mem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mem(i), target);
  }

  // required string turnFor = 5;
  if (has_turnfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->turnfor().data(), this->turnfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "turnfor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->turnfor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.Game)
  return target;
}

int Game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .game.Board board = 2;
    if (has_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->board());
    }

    // required int32 options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->options());
    }

    // required string turnFor = 5;
    if (has_turnfor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->turnfor());
    }

  }
  // repeated .game.User user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  // repeated .game.Move mem = 4;
  total_size += 1 * this->mem_size();
  for (int i = 0; i < this->mem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game::MergeFrom(const Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  mem_.MergeFrom(from.mem_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_board()) {
      mutable_board()->::game::Board::MergeFrom(from.board());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
    if (from.has_turnfor()) {
      set_turnfor(from.turnfor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game::CopyFrom(const Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000014) != 0x00000014) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  if (has_board()) {
    if (!this->board().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->mem())) return false;
  return true;
}

void Game::Swap(Game* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    std::swap(board_, other->board_);
    std::swap(options_, other->options_);
    mem_.Swap(&other->mem_);
    std::swap(turnfor_, other->turnfor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game_descriptor_;
  metadata.reflection = Game_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)
